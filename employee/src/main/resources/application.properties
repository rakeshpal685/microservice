#server.port=8081
spring.application.name=EMPLOYEE-SERVICE

#banner
spring.main.banner-mode=off

#logging
logging.level.root=INFO

#eureka properties
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
#If my Eureka is not registered in the default port then I have to tell to my service to register themselves with the modified port
#eureka.client.service-url.defaultZone=http://localhost:5000/eureka/
#For different zones, we can specify the urls as below
#eureka.client.service-url.z1=http://localhost1000/eureka/
#eureka.client.service-url.z2=http://localhost:2000/eureka/
#This is the interval after which our service will send a heartbeat to Eureka that I am alive.
eureka.instance.lease-renewal-interval-in-seconds=10

#actuator properties
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#Information to show in info endpoints
management.endpoint.info.enabled=true
management.info.env.enabled=true
management.info.build.enabled=true
management.info.git.enabled=true
management.info.git.mode=full
management.info.java.enabled=true
management.info.os.enabled=true

#to enable circuitbreaker and ratelimiter
#Actuator properties for circuitBreaker
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true
resilience4j.circuitbreaker.instances.studentBreaker.allow-health-indicator-to-fail=true
resilience4j.circuitbreaker.instances.studentBreaker.register-health-indicator=true

#Here studentBreaker is the name of the circuitbreaker that we have used in employee controller, similarly we can have
#multiple circuitbreakers in our code with different names for different controllers
resilience4j.circuitbreaker.instances.studentBreaker.eventConsumerBufferSize=10
#these are the minimum number of calls that are tracked by the circuit breaker after which the circuit breaker will change it's state
resilience4j.circuitbreaker.instances.studentBreaker.minimumNumberOfCalls=5
#open the circuit if 50% of the above tracked calls are failed
resilience4j.circuitbreaker.instances.studentBreaker.failureRateThreshold=50
#The time in ms that the CircuitBreaker should wait before transitioning from open to half-open.
resilience4j.circuitbreaker.instances.studentBreaker.waitDurationInOpenState=3s
#In half open state allow any 3 calls, if it passes the threshold then move to closed state else to open state
resilience4j.circuitbreaker.instances.studentBreaker.permittedNumberOfCallsInHalfOpenState=3
#After the waitDurationInOpenState if we want to automatically move my circuit breaker to half open state else the state will be changed only a request is made
resilience4j.circuitbreaker.instances.studentBreaker.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.studentBreaker.registerHealthIndicator=true
#This is to track the last 10 calls status and change the status of the circuit breaker, somewhat same as minimumNumberOfCalls
resilience4j.circuitbreaker.instances.studentBreaker.slidingWindowSize=10
#Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
#Sliding window can either be count-based or time-based.
#If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
resilience4j.circuitbreaker.instances.studentBreaker.slidingWindowType=COUNT_BASED
#If the sliding window is TIME_BASED, the minimumNumberOfCalls in the slidingWindowSize seconds are matched with failureRateThreshold and circuit's status is changed.
#resilience4j.circuitbreaker.instances.studentBreaker.slidingWindowType=TIME_BASED
#If the Api where I have written the circuit Breaker is not responding within slowCallDurationThreshold, then consider it as slow call
#resilience4j.circuitbreaker.instances.studentBreaker.slowCallDurationThreshold=2s
#We will keep a track of (slidingWindowSize/minimumNumberOfCalls) calls and if more then (slowCallRateThreshold)% calls are taking more then (slowCallDurationThreshold), then trip te circuitbreaker
#resilience4j.circuitbreaker.instances.studentBreaker.slowCallRateThreshold=70

#This is for all other circuit breakers apart from studentBreaker (global)
#resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=4

#these are for retrying the student service, studentServiceRetry is the name of the retry in controller
resilience4j.retry.instances.studentServiceRetry.max-attempts=3
resilience4j.retry.instances.studentServiceRetry.wait-duration=5s
#Telling that inside my controller if this exception happens then don't retry, just call fallback
resilience4j.retry.instances.studentServiceRetry.ignore-exceptions=java.lang.NullPointerException
#Telling that inside my controller if this exception happens then do retry
resilience4j.retry.instances.studentServiceRetry.retry-exceptions=org.springframework.web.client.ResourceAccessException
#This will exponentially increase the retry duration and will not follow the above-mentioned duration
resilience4j.retry.instances.studentServiceRetry.enable-exponential-backoff=true

#Rate limiter properties
#every 4s I will take only 2 request,rest request will be timeout if timeout-duration=0s else wait for 10s and ask again to process
resilience4j.ratelimiter.instances.presentServiceRateLimiter.limit-refresh-period=4s
resilience4j.ratelimiter.instances.presentServiceRateLimiter.limit-for-period=2
resilience4j.ratelimiter.instances.presentServiceRateLimiter.timeout-duration=10s

#admin server properties
spring.boot.admin.client.url=http://localhost:1111/
spring.cloud.compatibility-verifier.enabled=false

#database related properties
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=180000
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.password=password
spring.datasource.url=jdbc:mysql://localhost:3306/microservices
spring.datasource.username=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

#to enable swagger in local, in prod profile we will set this property to false, so that no swagger is available there
springdoc.swagger-ui.enabled=true

#This is written here so that while doing rest call using REST TEMPLATE we don't have to write this URL again and we can simply append it with other pattern
studentService.base.url.for.restTemplate=http://localhost:8081/studController/

#This is used to tell the number of request to send to sleuth, we will not send our 100% requests to sleuth, when
#we have thousands of request id generated for each request, we will just send a few to track the performance.
#so we can configure the percentage here for number of request to send to sleuth
#spring.sleuth.sampler.probability=0.1
#spring.zipkin.base-url= url of zipkin server if not running on default port


#Properties for Config server in GITHUB
#This is to tell that connect to the config server using the config.server.uri provided below and read the properties from there, we will not keep most of the
#properties here in this .properties file, add spring-cloud-starter-config dependency
#config server properties will override the same properties if present in local,
#The properties/yml file present in cloud server should have the same name as service name("spring.application.name") given in the respective .properties file, because
#we can keep multiple properties files of different services in the same location
# (EMPLOYEE-SERVICE in this case), for dev the property file should be EMPLOYEE-SERVICE-dev.properties and EMPLOYEE-SERVICE-qa.yml/properties for QA
#If we are adding @Value to get a value from the properties file, that entry must present in local properties file too, so that the bean of the class in which it is declared can be created
#This property is to tell that if config server is available then connect to it or else use our local .properties file
#So the flow is, first my service will hit the eureka to get the config server details and after that it will hit the configserver, config server will hit the
#given location of the .properties files (cloud, DB, File) and give back the values.
#If we want to comment this optional thing then we have to add spring-cloud-starter-bootstrap dependency
spring.config.import=optional:configserver:
#spring.cloud.config.uri=optional:configserver:http://localhost:8888
#this is to tell to my service that look for the config server in eureka and connect to it
spring.cloud.config.discovery.enabled=true
#name given to the config server in eureka
spring.cloud.config.discovery.service-id=CONFIG-SERVER

#This property will be there in realtime to choose the active profile
spring.profiles.active=dev
#http://localhost:8888/employee/default- actuator endpoint to see the default properties present in employee.properties file in git
#We must include actuator dependency too, so that any changes made in the remote configuration file will be picked up here
#use @RefreshScope on top of the class if we are using @Value to fetch the property, because by default @Value property will
#not refresh and fetched from the cloud server properties
#I have to add spring-cloud-starter-bus-amqp dependency so that my changes in config files will be picked up here,
#Provide rabbitMQ/Kafka details here
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest

